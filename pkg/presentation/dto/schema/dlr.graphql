extend type Query {
  """The Dlr EP returns a single Dlr that is given ID"""
  dlr( Id: ID!): Dlr! @goField(forceResolver: true) @auth(policy: "dlr.read")
  """The Dlrs EP takes filter and returns all Dlrs of matched with filter"""
  dlrs(filter: DlrFilterInput): Dlrs! @goField(forceResolver: true) @auth(policy: "dlr.list")
}

type Dlrs {
  """The total number of Dlrs that match the filter"""
  Total: Int!
  """The Dlrs that match the filter"""
  Dlrs: [Dlr!]!
}

"""Dlr represents the basic values of the dlr"""
type Dlr {
  """Id is the id of the dlr"""
  Id: ID!
  """DlrType is the type of the dlr"""
  DlrType: DlrType!
  """DlrStatus is the status of the dlr"""
  DlrStatus: DlrStatus!
  """DlrBase is the base values of the dlr"""
  DlrBase: DlrBase!
  """DlrCore is the core values of the dlr"""
  DlrCore: DlrCore!
  """CreatedAt is the create time of the dlr"""
  CreatedAt: Timestamp!
  """UpdatedAt is the update time of the dlr"""
  UpdatedAt: Timestamp!  
}

"""DlrBase represents the base values of the dlr"""
type DlrBase {
  """Tags are the tag labels of the dlr"""
  Tags: [String!]!
}

"""DlrCore represents the core values of the dlr"""
type DlrCore {
  """DlrData is the dlr data of the dlr"""
  DlrData: String!
}

"""DlrFilterInput is used for filtering the Dlrs"""
input DlrFilterInput {
  """Id is the id of the dlr"""
  Id: ID
  """DlrType is the type of the dlr"""
  DlrType: DlrType
  """DlrStatus is the status of the dlr"""
  DlrStatus: DlrStatus
  """Tags are the tag labels of the dlr"""
  Tags: [String!]
  """CreatedAtFrom is the start value of the create time of the dlr"""
  CreatedAtFrom: Timestamp
  """CreatedAtTo is the end value of the create time of the dlr"""
  CreatedAtTo: Timestamp
  """UpdatedAtFrom is the start value of the update time of the dlr"""
  UpdatedAtFrom: Timestamp
  """UpdatedAtTo is the end value of the update time of the dlr"""
  UpdatedAtTo: Timestamp
  """SearchText is the value of the full text search"""
  SearchText: String
  """SortType is the sorting type. It can be only ASC or DESC"""
  SortType: String
  """SortField is the sortable field of the dlr"""
  SortField: DlrSortField
  """PageInput is used for pagination"""
  Pagination: PageInput
}

"""Dlr represents the basic values of the dlr"""
input DlrInput {
  """Id is the id of the dlr"""
  Id: ID
  """DlrStatus is the status of the dlr"""
  DlrType: DlrType
  """DlrStatus is the status of the dlr"""
  DlrStatus: DlrStatus
  """DlrBase is the base values of the dlr"""
  DlrBase: DlrBaseInput
  """DlrCore is the core values of the dlr"""
  DlrCore: DlrCoreInput
}

"""DlrBase represents the base values of the dlr"""
input DlrBaseInput {
  """Tags are the tag labels of the dlr"""
  Tags: [String!]
}

"""DlrCore represents the core values of the dlr"""
input DlrCoreInput {
  """DlrData is the dlr data of the dlr"""
  DlrData: String
}

extend type Mutation {
  """Create Dlr EP creates a new dlr with given Dlr and returns it"""
  createDlr(dlr: DlrInput!): Dlr! @goField(forceResolver: true) @auth(policy: "dlr.create")
  """Update Dlr Base EP updates the given dlr's base values and returns it"""
  updateDlrBase(dlr: DlrInput!): Dlr! @goField(forceResolver: true) @auth(policy: "dlr.update.base")
  """Update Dlr Core EP updates the given dlr's core values and returns it"""
  updateDlrCore(dlr: DlrInput!): Dlr! @goField(forceResolver: true) @auth(policy: "dlr.update.core")
  """Update Dlr Status EP updates given dlr status and returns it"""
  updateDlrStatus(dlr: DlrInput!): Dlr! @goField(forceResolver: true) @auth(policy: "dlr.update.status")
  """Delete Dlr EP deletes Dlr that is given ID and returns it"""
  deleteDlr(Id: ID!): Dlr! @goField(forceResolver: true) @auth(policy: "dlr.delete")
}

enum DlrType {
  """No Type"""
	NONE
}

enum DlrSortField {
  """No Type"""
	None
  """Id"""
	Id
  """Created Time"""
	CreatedAt
  """Updated Time"""
	UpdatedAt
}

enum DlrStatus {
  """No Type"""
  NONE
  """Active"""
  ACTIVE
  """Inactive"""
  INACTIVE
}