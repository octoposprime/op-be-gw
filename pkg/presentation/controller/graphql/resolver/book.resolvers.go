package presentation

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"

	mo "github.com/octoposprime/op-be-graphql/internal/domain/model/object"
	presentation "github.com/octoposprime/op-be-graphql/pkg/presentation/dto/model"
)

// CreatePage is the resolver for the createPage field.
func (r *mutationResolver) CreatePage(ctx context.Context, page presentation.PageInput) (*presentation.Page, error) {
	dtoData := presentation.NewPageDto(&page)
	resultData, err := r.CommandHandler.CreatePage(ctx, dtoData.ToPb())
	if err != nil {
		return nil, err
	}
	dtoData.PbData = resultData
	return dtoData.ToModel(), nil
}

// UpdatePageBase is the resolver for the updatePageBase field.
func (r *mutationResolver) UpdatePageBase(ctx context.Context, page presentation.PageInput) (*presentation.Page, error) {
	dtoData := presentation.NewPageDto(&page)
	resultData, err := r.CommandHandler.UpdatePageBase(ctx, dtoData.ToPb())
	if err != nil {
		return nil, err
	}
	dtoData.PbData = resultData
	return dtoData.ToModel(), nil
}

// UpdatePageCore is the resolver for the updatePageCore field.
func (r *mutationResolver) UpdatePageCore(ctx context.Context, page presentation.PageInput) (*presentation.Page, error) {
	dtoData := presentation.NewPageDto(&page)
	resultData, err := r.CommandHandler.UpdatePageCore(ctx, dtoData.ToPb())
	if err != nil {
		return nil, err
	}
	dtoData.PbData = resultData
	return dtoData.ToModel(), nil
}

// UpdatePageStatus is the resolver for the updatePageStatus field.
func (r *mutationResolver) UpdatePageStatus(ctx context.Context, page presentation.PageInput) (*presentation.Page, error) {
	dtoData := presentation.NewPageDto(&page)
	resultData, err := r.CommandHandler.UpdatePageStatus(ctx, dtoData.ToPb())
	if err != nil {
		return nil, err
	}
	dtoData.PbData = resultData
	return dtoData.ToModel(), nil
}

// DeletePage is the resolver for the deletePage field.
func (r *mutationResolver) DeletePage(ctx context.Context, id string) (*presentation.Page, error) {
	inData := new(presentation.PageInput)
	inData.ID = &id
	dtoData := presentation.NewPageDto(inData)
	resultData, err := r.CommandHandler.DeletePage(ctx, dtoData.ToPb())
	if err != nil {
		return nil, err
	}
	dtoData.PbData = resultData
	return dtoData.ToModel(), nil
}

// Page is the resolver for the page field.
func (r *queryResolver) Page(ctx context.Context, id string) (*presentation.Page, error) {
	var filter presentation.PageFilterInput
	filter.ID = &id
	dtoFilter := presentation.NewPageFilterDto(&filter)
	dtoData := presentation.NewPageDto(new(presentation.PageInput))
	resultDatas, err := r.QueryHandler.GetPagesByFilter(ctx, dtoFilter.ToPb())
	if err != nil {
		return nil, err
	}
	if len(resultDatas.Pages) > 0 {
		dtoData.PbData = resultDatas.Pages[0]
		return dtoData.ToModel(), nil
	} else {
		return nil, mo.ErrorPageNotFound
	}
}

// Pages is the resolver for the pages field.
func (r *queryResolver) Pages(ctx context.Context, filter *presentation.PageFilterInput) (*presentation.Pages, error) {
	var results presentation.Pages
	if filter == nil {
		filter = &presentation.PageFilterInput{}
	}
	dtoFilter := presentation.NewPageFilterDto(filter)

	resultDatas, err := r.QueryHandler.GetPagesByFilter(ctx, dtoFilter.ToPb())
	if err != nil {
		return nil, err
	}

	for _, resultData := range resultDatas.Pages {
		dtoData := presentation.NewPageDto(new(presentation.PageInput))
		dtoData.PbData = resultData
		results.Pages = append(results.Pages, dtoData.ToModel())
	}
	results.Total = int32(resultDatas.TotalRows)

	return &results, nil
}
